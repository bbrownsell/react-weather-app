{"version":3,"sources":["components/Form.js","components/Weather.js","App.js","reportWebVitals.js","index.js"],"names":["Form","input","setInput","handleSearch","onSubmit","className","type","value","onChange","e","target","Weather","city","temp","desc","icon","background","iconUrl","celcius","Math","round","parseFloat","src","alt","App","useState","search","setSearch","weather","setWeather","isLoading","setIsloading","url","useEffect","getWeather","a","fetch","response","json","data","cod","alert","console","log","preventDefault","main","name","description","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAiBeA,EAjBF,SAAC,GAAuC,IAArCC,EAAoC,EAApCA,MAAOC,EAA6B,EAA7BA,SAAUC,EAAmB,EAAnBA,aAM7B,OACI,mCACI,uBAAMC,SAAUD,EAAhB,UACI,uBAAOE,UAAU,aAAjB,+BACA,uBAAOA,UAAU,cAAcC,KAAK,OAAOC,MAAON,EAAOO,SARjD,SAACC,GACjBP,EAASO,EAAEC,OAAOH,UAQV,wBAAQD,KAAK,SAAb,0BCODK,EAhBC,SAAC,GAA0C,IAAzCC,EAAwC,EAAxCA,KAAMC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,WAChCC,EAAO,2CAAuCF,EAAvC,QACPG,EAAUC,KAAKC,MAAMC,WAAWR,GAAM,QAE5C,OACI,sBAAKR,UAAS,kBAAaW,GAA3B,UACI,oBAAIX,UAAU,OAAd,SAAsBO,IACtB,sBAAKP,UAAU,OAAf,UAAuBa,EAAvB,WACA,qBAAKb,UAAU,cAAf,SAA8BS,IAC9B,qBAAKT,UAAU,OAAf,SACI,qBAAKiB,IAAKL,EAASM,IAAKT,EAAMT,UAAU,mBCqDzCmB,MA5Df,WAAgB,IAAD,EACaC,mBAAS,IADtB,mBACNxB,EADM,KACCC,EADD,OAEeuB,mBAAS,IAFxB,mBAENC,EAFM,KAEEC,EAFF,OAGiBF,mBAAS,IAH1B,mBAGNG,EAHM,KAGGC,EAHH,OAIqBJ,oBAAS,GAJ9B,mBAINK,EAJM,KAIKC,EAJL,KAOPC,EAAG,4DAAwDN,EAAxD,kBADM,oCAGfO,qBAAU,WACJH,EACFC,GAAa,GAEbG,MAED,CAACR,IAGJ,IAAMQ,EAAU,uCAAG,8BAAAC,EAAA,+EAEQC,MAAMJ,GAFd,cAETK,EAFS,gBAGIA,EAASC,OAHb,OAIE,SADXC,EAHS,QAINC,KACPC,MAAM,oCAERC,QAAQC,IAAIJ,GACZV,EAAWU,GARI,4GAAH,qDAuBhB,OACE,sBAAKlC,UAAU,YAAf,UACE,6CACA,sBAAKA,UAAU,UAAf,UACA,cAAC,EAAD,CAAMJ,MAAOA,EAAOC,SAAUA,EAAUC,aAdvB,SAACM,GACpBA,EAAEmC,iBACFjB,EAAU1B,GACI,KAAVA,GACFwC,MAAM,uBAERvC,EAAS,OASN0B,EAAQiB,MACP,cAAC,EAAD,CACEjC,KAAMgB,EAAQkB,KACdjC,KAAMe,EAAQiB,KAAKhC,KACnBC,KAAMc,EAAQA,QAAQ,GAAGmB,YACzBhC,KAAMa,EAAQA,QAAQ,GAAGb,KACzBC,WAAYY,EAAQA,QAAQ,GAAGiB,cC7C1BG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.7b56ac04.chunk.js","sourcesContent":["const Form = ({ input, setInput, handleSearch }) => {\r\n\r\n    const handleInput = (e) => {\r\n        setInput(e.target.value);\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <form onSubmit={handleSearch}>\r\n                <label className=\"city-label\">Search For a City</label>\r\n                <input className=\"search-city\" type=\"text\" value={input} onChange={handleInput}/>\r\n                <button type=\"submit\">Search</button>\r\n            </form>\r\n        </>\r\n      );\r\n}\r\n \r\nexport default Form;","import React from 'react'\r\n\r\nconst Weather = ({city, temp, desc, icon, background}) => {\r\n    const iconUrl = `https://openweathermap.org/img/w/${icon}.png`;\r\n    const celcius = Math.round(parseFloat(temp)-273.15);\r\n\r\n    return (\r\n        <div className={`weather ${background}`}>\r\n            <h2 className=\"city\">{city}</h2>\r\n            <div className=\"temp\">{celcius}&deg;c</div>\r\n            <div className=\"description\">{desc}</div>\r\n            <div className=\"icon\">\r\n                <img src={iconUrl} alt={desc} className=\"icon-img\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n \r\nexport default Weather;","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nfunction App() {\n  const [input, setInput] = useState('');\n  const [search, setSearch] = useState('');\n  const [weather, setWeather] = useState({});\n  const [isLoading, setIsloading] = useState(true);\n\n  const apiKey = 'e6b9b998b2255b5a9803b5dc3fa7e273';\n  const url = `https://api.openweathermap.org/data/2.5/weather?q=${search}&appid=${apiKey}`;\n\n  useEffect(()=>{\n    if (isLoading) {\n      setIsloading(false);\n    } else {\n      getWeather();\n    }\n  }, [search])\n\n\n  const getWeather = async () => {\n    try {\n      const response = await fetch(url);\n      const data = await response.json();\n      if (data.cod === \"404\") { \n        alert(\"City not found. Please try again\")\n      }\n      console.log(data)\n      setWeather(data);\n    } catch (error) {\n    }\n  }\n\n  const handleSearch = (e) => {\n    e.preventDefault();\n    setSearch(input);\n    if (input === '') {\n      alert(\"Please enter a City\");\n    }\n    setInput('');\n  }\n\n\n  return (\n    <div className=\"container\">\n      <h1>Weather App</h1>\n      <div className=\"content\">\n      <Form input={input} setInput={setInput} handleSearch={handleSearch}/>\n      {weather.main && (\n        <Weather\n          city={weather.name}\n          temp={weather.main.temp}\n          desc={weather.weather[0].description}\n          icon={weather.weather[0].icon}\n          background={weather.weather[0].main}\n        />\n      )}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}